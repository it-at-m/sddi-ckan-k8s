{{- if .Values.enabled -}}
{{- if .Values.persistence.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ckan.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "ckan.labels" . | nindent 4 }}
    app.kubernetes.io/part-of: sddi-ckan
    app.kubernetes.io/component: {{ .Values.component }}
spec:
  serviceName: {{ .Chart.Name }}-hl
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "ckan.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ .Values.component }}
  template:
    metadata:
      labels:
        {{- include "ckan.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ .Values.component }}
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
        checksum/configmap-env: {{ include (print $.Template.BasePath "/ckan-configMap-env.yml") . | sha256sum }}
        checksum/secret-db: {{ include (print $.Template.BasePath "/ckan-sct-db.yml") . | sha256sum }}
        checksum/secret-smtp: {{ include (print $.Template.BasePath "/ckan-sct-smtp.yml") . | sha256sum }}
        checksum/secret-solr: {{ include (print $.Template.BasePath "/ckan-sct-solr.yml") . | sha256sum }}
        checksum/secret-session: {{ include (print $.Template.BasePath "/ckan-sct-session.yml") . | sha256sum }}
        checksum/secret-api-token: {{ include (print $.Template.BasePath "/ckan-sct-api-token.yml") . | sha256sum }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ckan.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "ckan.fullname" . }}
        - name: production-ini
          emptyDir:
            sizeLimit: 500Mi
        - name: srv-app-i18n
          emptyDir:
            sizeLimit: 500Mi
        - name: srv-app-data
          emptyDir:
            sizeLimit: 500Mi
        - name: uwsgi-conf
          emptyDir:
            sizeLimit: 500Mi
        - name: prerun-py
          emptyDir:
            sizeLimit: 500Mi


      initContainers:
      {{ if .Values.initContainers.initdata.enabled }}
      - name: init-data
        image: "{{ .Values.initContainers.initdata.image.repository }}:{{ .Values.initContainers.initdata.image.tag }}"
        command: ["sh", "-c", "chown -Rv 92:92 {{ .Values.persistence.storagePath }}"]
        volumeMounts:
        - name: data
          mountPath: {{ .Values.persistence.storagePath }}
          readOnly: false
      {{ end }}

      ## get original /srv/app/production.ini from image
      # and copy to /tmp/
      # to mount it in a writable emtpty dir
      - name: copy-productionini
        ## same image as container {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["/bin/sh","-c"]
        args: ["cp -v /srv/app/production.ini /tmp/production.ini"]
        volumeMounts:
        - name: production-ini
          mountPath: /tmp
      

      ## get original /srv/app/uwsgi.conf from image,
      # copy it to /tmp2/ and change listen value
      # to mount it then in a writable emtpty dir
      - name: copy-uwsgiconf
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["/bin/sh","-c"]
        args: ["cp -v /srv/app/uwsgi.conf /tmp2/uwsgi.conf && sed -i 's/listen = 1000/listen = 100/g' /tmp2/uwsgi.conf"]
        volumeMounts:
        - name: uwsgi-conf
          mountPath: /tmp2
      

      ## similar for /srv/app/prerun.py
      - name: copy-prerunpy
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command: ["/bin/sh","-c"]
        args:
          - >-
            cp -v /srv/app/prerun.py /tmp3/prerun.py && sed -i '215 a def update_plugins():\n\n    plugins = os.environ.get("CKAN__PLUGINS", "")\n    print(("[prerun] Setting the following plugins in {}:".format(ckan_ini)))\n    print(plugins)\n    cmd = ["ckan", "config-tool", ckan_ini, "ckan.plugins = {}".format(plugins)]\n    subprocess.check_output(cmd, stderr=subprocess.STDOUT)\n    print("[prerun] Plugins set.")\n\n' /tmp3/prerun.py && sed -i '235 a # update plugins\n        update_plugins()' /tmp3/prerun.py
        volumeMounts:
        - name: prerun-py
          mountPath: /tmp3


      - name: pg-ready
        image: "{{ .Values.initContainers.pgready.image.repository }}:{{ .Values.initContainers.pgready.image.tag }}"
        command:
          - pg_isready
        env:
          - name: PGHOST
            value: {{ .Values.global.db.host | default .Values.db.host | quote }}
          - name: PGPORT
            value: {{ .Values.global.db.port | default .Values.db.port | quote }}
          - name: PGDATABASE
            value: {{ .Values.global.db.dbname | default .Values.db.dbname | quote }}
          - name: PGUSER
            value: {{ .Values.global.db.auth.username | default .Values.db.auth.username | quote }}
          - name: PGPASSWORD
            value: {{ .Values.global.db.auth.password | default .Values.db.auth.password | quote }}


      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP

          envFrom:
            - configMapRef:
                name: {{ include "ckan.fullname" . }}-env
            - secretRef:
                name: {{ include "ckan.fullname" . }}-sct-db
            - secretRef:
                name: {{ include "ckan.fullname" . }}-sct-smtp
            - secretRef:
                name: {{ include "ckan.fullname" . }}-sct-solr
            - secretRef:
                name: {{ include "ckan.fullname" . }}-sct-session
            - secretRef:
                name: {{ include "ckan.fullname" . }}-sct-api-token
            {{ if .Values.sysadmin.enabled }}
            - secretRef:
                name: {{ include "ckan.fullname" . }}-sct-sysadmin
            {{ end }}

          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.storagePath }}
            - name: production-ini
              mountPath: /srv/app/production.ini
              subPath: production.ini
            - name: srv-app-data
              mountPath: /srv/app/data/
            - name: srv-app-i18n
              mountPath: /srv/app/src/ckan/ckan/public/base/i18n/
            - name: uwsgi-conf
              mountPath: /srv/app/uwsgi.conf
              subPath: uwsgi.conf
            - name: prerun-py
              mountPath: /srv/app/prerun.py
              subPath: prerun.py


          startupProbe:
            httpGet:
              path: /api/3/action/status_show
              port: 5000
            initialDelaySeconds: {{ .Values.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.startup.periodSeconds }}
            failureThreshold: {{ .Values.startup.failureThreshold }}
            timeoutSeconds: {{ .Values.startup.timeoutSeconds }}

          readinessProbe:
            httpGet:
              path: /api/3/action/status_show
              port: 5000
            initialDelaySeconds: {{ .Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.readiness.periodSeconds }}
            failureThreshold: {{ .Values.readiness.failureThreshold }}
            timeoutSeconds: {{ .Values.readiness.timeoutSeconds }}

          livenessProbe:
            httpGet:
              path: /api/3/action/status_show
              port: 5000
            initialDelaySeconds: {{ .Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.liveness.periodSeconds }}
            failureThreshold: {{ .Values.liveness.failureThreshold }}
            timeoutSeconds: {{ .Values.liveness.timeoutSeconds }}

          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end -}}
{{- end -}}
